# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015Offers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'details_url_override': 'str',
        'slug_override': 'str',
        'provider': 'InlineResponse20015Provider',
        'rating': 'InlineResponse20015Rating',
        'brand': 'InlineResponse20015Brand',
        'available_at': 'datetime',
        'available_until': 'datetime',
        'images': 'list[InlineResponse20015Images]',
        'writeups': 'list[InlineResponse20015Writeups]',
        'redemption_locations': 'list[AllOfinlineResponse20015OffersRedemptionLocationsItems]',
        'points_of_interest': 'list[AllOfinlineResponse20015OffersPointsOfInterestItems]',
        'products': 'list[AllOfinlineResponse20015OffersProductsItems]'
    }

    attribute_map = {
        'id': 'id',
        'details_url_override': 'detailsUrlOverride',
        'slug_override': 'slugOverride',
        'provider': 'provider',
        'rating': 'rating',
        'brand': 'brand',
        'available_at': 'availableAt',
        'available_until': 'availableUntil',
        'images': 'images',
        'writeups': 'writeups',
        'redemption_locations': 'redemptionLocations',
        'points_of_interest': 'pointsOfInterest',
        'products': 'products'
    }

    def __init__(self, id=None, details_url_override=None, slug_override=None, provider=None, rating=None, brand=None, available_at=None, available_until=None, images=None, writeups=None, redemption_locations=None, points_of_interest=None, products=None):  # noqa: E501
        """InlineResponse20015Offers - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._details_url_override = None
        self._slug_override = None
        self._provider = None
        self._rating = None
        self._brand = None
        self._available_at = None
        self._available_until = None
        self._images = None
        self._writeups = None
        self._redemption_locations = None
        self._points_of_interest = None
        self._products = None
        self.discriminator = None
        self.id = id
        if details_url_override is not None:
            self.details_url_override = details_url_override
        if slug_override is not None:
            self.slug_override = slug_override
        self.provider = provider
        if rating is not None:
            self.rating = rating
        if brand is not None:
            self.brand = brand
        self.available_at = available_at
        if available_until is not None:
            self.available_until = available_until
        if images is not None:
            self.images = images
        self.writeups = writeups
        if redemption_locations is not None:
            self.redemption_locations = redemption_locations
        if points_of_interest is not None:
            self.points_of_interest = points_of_interest
        self.products = products

    @property
    def id(self):
        """Gets the id of this InlineResponse20015Offers.  # noqa: E501

        The partner’s external unique identifier. This will be used to link the Groupon offer id to the partner’s internal data. The expectation is that this id will uniquely identify the data in the partner’s system.   # noqa: E501

        :return: The id of this InlineResponse20015Offers.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20015Offers.

        The partner’s external unique identifier. This will be used to link the Groupon offer id to the partner’s internal data. The expectation is that this id will uniquely identify the data in the partner’s system.   # noqa: E501

        :param id: The id of this InlineResponse20015Offers.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def details_url_override(self):
        """Gets the details_url_override of this InlineResponse20015Offers.  # noqa: E501

        This URL is used to link out search results to an external offer page. The use of this field will bypass the Groupon offer details page entirely. This field is optional, and should only be used for link out offers which leave the Groupon site when the user clicks the search result. This will result in users not being sent to the main details page on Groupon, and instead to this URL.   # noqa: E501

        :return: The details_url_override of this InlineResponse20015Offers.  # noqa: E501
        :rtype: str
        """
        return self._details_url_override

    @details_url_override.setter
    def details_url_override(self, details_url_override):
        """Sets the details_url_override of this InlineResponse20015Offers.

        This URL is used to link out search results to an external offer page. The use of this field will bypass the Groupon offer details page entirely. This field is optional, and should only be used for link out offers which leave the Groupon site when the user clicks the search result. This will result in users not being sent to the main details page on Groupon, and instead to this URL.   # noqa: E501

        :param details_url_override: The details_url_override of this InlineResponse20015Offers.  # noqa: E501
        :type: str
        """

        self._details_url_override = details_url_override

    @property
    def slug_override(self):
        """Gets the slug_override of this InlineResponse20015Offers.  # noqa: E501

        An override for the automatically generated URL slug. If this field is specified, this value will be used as a base but may be automatically disambiguated if conflicting slugs already exist in the system.  This is to ensure that the slug is universally unique across all offers. If this field is not specified, the slug will automatically be generated by the system based on the `offers[].offer.provider.name` field.   # noqa: E501

        :return: The slug_override of this InlineResponse20015Offers.  # noqa: E501
        :rtype: str
        """
        return self._slug_override

    @slug_override.setter
    def slug_override(self, slug_override):
        """Sets the slug_override of this InlineResponse20015Offers.

        An override for the automatically generated URL slug. If this field is specified, this value will be used as a base but may be automatically disambiguated if conflicting slugs already exist in the system.  This is to ensure that the slug is universally unique across all offers. If this field is not specified, the slug will automatically be generated by the system based on the `offers[].offer.provider.name` field.   # noqa: E501

        :param slug_override: The slug_override of this InlineResponse20015Offers.  # noqa: E501
        :type: str
        """

        self._slug_override = slug_override

    @property
    def provider(self):
        """Gets the provider of this InlineResponse20015Offers.  # noqa: E501


        :return: The provider of this InlineResponse20015Offers.  # noqa: E501
        :rtype: InlineResponse20015Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse20015Offers.


        :param provider: The provider of this InlineResponse20015Offers.  # noqa: E501
        :type: InlineResponse20015Provider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def rating(self):
        """Gets the rating of this InlineResponse20015Offers.  # noqa: E501


        :return: The rating of this InlineResponse20015Offers.  # noqa: E501
        :rtype: InlineResponse20015Rating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this InlineResponse20015Offers.


        :param rating: The rating of this InlineResponse20015Offers.  # noqa: E501
        :type: InlineResponse20015Rating
        """

        self._rating = rating

    @property
    def brand(self):
        """Gets the brand of this InlineResponse20015Offers.  # noqa: E501


        :return: The brand of this InlineResponse20015Offers.  # noqa: E501
        :rtype: InlineResponse20015Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse20015Offers.


        :param brand: The brand of this InlineResponse20015Offers.  # noqa: E501
        :type: InlineResponse20015Brand
        """

        self._brand = brand

    @property
    def available_at(self):
        """Gets the available_at of this InlineResponse20015Offers.  # noqa: E501

        The datetime which specifies when the offer first becomes available. This field is inclusive in terms of the availability, meaning that the offer is available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :return: The available_at of this InlineResponse20015Offers.  # noqa: E501
        :rtype: datetime
        """
        return self._available_at

    @available_at.setter
    def available_at(self, available_at):
        """Sets the available_at of this InlineResponse20015Offers.

        The datetime which specifies when the offer first becomes available. This field is inclusive in terms of the availability, meaning that the offer is available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :param available_at: The available_at of this InlineResponse20015Offers.  # noqa: E501
        :type: datetime
        """
        if available_at is None:
            raise ValueError("Invalid value for `available_at`, must not be `None`")  # noqa: E501

        self._available_at = available_at

    @property
    def available_until(self):
        """Gets the available_until of this InlineResponse20015Offers.  # noqa: E501

        The datetime which specifies when the offer stops being available. This field is exclusive in terms of the availability, meaning that the offer is not available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :return: The available_until of this InlineResponse20015Offers.  # noqa: E501
        :rtype: datetime
        """
        return self._available_until

    @available_until.setter
    def available_until(self, available_until):
        """Sets the available_until of this InlineResponse20015Offers.

        The datetime which specifies when the offer stops being available. This field is exclusive in terms of the availability, meaning that the offer is not available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :param available_until: The available_until of this InlineResponse20015Offers.  # noqa: E501
        :type: datetime
        """

        self._available_until = available_until

    @property
    def images(self):
        """Gets the images of this InlineResponse20015Offers.  # noqa: E501

        An ordered list of image URLs.  The images will be retrieved from this URL and then re-uploaded into the Groupon Platform; they will not be used to serve live traffic.   # noqa: E501

        :return: The images of this InlineResponse20015Offers.  # noqa: E501
        :rtype: list[InlineResponse20015Images]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this InlineResponse20015Offers.

        An ordered list of image URLs.  The images will be retrieved from this URL and then re-uploaded into the Groupon Platform; they will not be used to serve live traffic.   # noqa: E501

        :param images: The images of this InlineResponse20015Offers.  # noqa: E501
        :type: list[InlineResponse20015Images]
        """

        self._images = images

    @property
    def writeups(self):
        """Gets the writeups of this InlineResponse20015Offers.  # noqa: E501

        The text which generally describes the items or services being offered.   # noqa: E501

        :return: The writeups of this InlineResponse20015Offers.  # noqa: E501
        :rtype: list[InlineResponse20015Writeups]
        """
        return self._writeups

    @writeups.setter
    def writeups(self, writeups):
        """Sets the writeups of this InlineResponse20015Offers.

        The text which generally describes the items or services being offered.   # noqa: E501

        :param writeups: The writeups of this InlineResponse20015Offers.  # noqa: E501
        :type: list[InlineResponse20015Writeups]
        """
        if writeups is None:
            raise ValueError("Invalid value for `writeups`, must not be `None`")  # noqa: E501

        self._writeups = writeups

    @property
    def redemption_locations(self):
        """Gets the redemption_locations of this InlineResponse20015Offers.  # noqa: E501

        An optional list of locations at which this offer can be redeemed. This list will be appended to the redemption locations for all products on the offer.  This field can be used to normalize the list of locations which all products share, and is entirely optional.   # noqa: E501

        :return: The redemption_locations of this InlineResponse20015Offers.  # noqa: E501
        :rtype: list[AllOfinlineResponse20015OffersRedemptionLocationsItems]
        """
        return self._redemption_locations

    @redemption_locations.setter
    def redemption_locations(self, redemption_locations):
        """Sets the redemption_locations of this InlineResponse20015Offers.

        An optional list of locations at which this offer can be redeemed. This list will be appended to the redemption locations for all products on the offer.  This field can be used to normalize the list of locations which all products share, and is entirely optional.   # noqa: E501

        :param redemption_locations: The redemption_locations of this InlineResponse20015Offers.  # noqa: E501
        :type: list[AllOfinlineResponse20015OffersRedemptionLocationsItems]
        """

        self._redemption_locations = redemption_locations

    @property
    def points_of_interest(self):
        """Gets the points_of_interest of this InlineResponse20015Offers.  # noqa: E501

        A list of locations that will show up in a map to give more context to the purchaser. For example this can be used for locations that a tour will visit. If pointsOfInterest aren't present, we will show the redemptionLocations on the map.  This list will be appended to the points of interests for all products on the offer.  This field can be used to normalize the list of locations which all products share, and is entirely optional.   # noqa: E501

        :return: The points_of_interest of this InlineResponse20015Offers.  # noqa: E501
        :rtype: list[AllOfinlineResponse20015OffersPointsOfInterestItems]
        """
        return self._points_of_interest

    @points_of_interest.setter
    def points_of_interest(self, points_of_interest):
        """Sets the points_of_interest of this InlineResponse20015Offers.

        A list of locations that will show up in a map to give more context to the purchaser. For example this can be used for locations that a tour will visit. If pointsOfInterest aren't present, we will show the redemptionLocations on the map.  This list will be appended to the points of interests for all products on the offer.  This field can be used to normalize the list of locations which all products share, and is entirely optional.   # noqa: E501

        :param points_of_interest: The points_of_interest of this InlineResponse20015Offers.  # noqa: E501
        :type: list[AllOfinlineResponse20015OffersPointsOfInterestItems]
        """

        self._points_of_interest = points_of_interest

    @property
    def products(self):
        """Gets the products of this InlineResponse20015Offers.  # noqa: E501

        The individual products being offered.   # noqa: E501

        :return: The products of this InlineResponse20015Offers.  # noqa: E501
        :rtype: list[AllOfinlineResponse20015OffersProductsItems]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this InlineResponse20015Offers.

        The individual products being offered.   # noqa: E501

        :param products: The products of this InlineResponse20015Offers.  # noqa: E501
        :type: list[AllOfinlineResponse20015OffersProductsItems]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015Offers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015Offers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
