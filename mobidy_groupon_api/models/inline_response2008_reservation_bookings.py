# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008ReservationBookings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_at': 'datetime',
        'available_until': 'datetime',
        'redemption_location_id': 'str',
        'attribute_ids': 'list[str]'
    }

    attribute_map = {
        'available_at': 'availableAt',
        'available_until': 'availableUntil',
        'redemption_location_id': 'redemptionLocationId',
        'attribute_ids': 'attributeIds'
    }

    def __init__(self, available_at=None, available_until=None, redemption_location_id=None, attribute_ids=None):  # noqa: E501
        """InlineResponse2008ReservationBookings - a model defined in Swagger"""  # noqa: E501
        self._available_at = None
        self._available_until = None
        self._redemption_location_id = None
        self._attribute_ids = None
        self.discriminator = None
        if available_at is not None:
            self.available_at = available_at
        if available_until is not None:
            self.available_until = available_until
        if redemption_location_id is not None:
            self.redemption_location_id = redemption_location_id
        if attribute_ids is not None:
            self.attribute_ids = attribute_ids

    @property
    def available_at(self):
        """Gets the available_at of this InlineResponse2008ReservationBookings.  # noqa: E501

        The time and/or date which specifies when the availability slot/segment first becomes available.   # noqa: E501

        :return: The available_at of this InlineResponse2008ReservationBookings.  # noqa: E501
        :rtype: datetime
        """
        return self._available_at

    @available_at.setter
    def available_at(self, available_at):
        """Sets the available_at of this InlineResponse2008ReservationBookings.

        The time and/or date which specifies when the availability slot/segment first becomes available.   # noqa: E501

        :param available_at: The available_at of this InlineResponse2008ReservationBookings.  # noqa: E501
        :type: datetime
        """

        self._available_at = available_at

    @property
    def available_until(self):
        """Gets the available_until of this InlineResponse2008ReservationBookings.  # noqa: E501

        The time and/or date which specifies when the availability slot/segment stops being available.   # noqa: E501

        :return: The available_until of this InlineResponse2008ReservationBookings.  # noqa: E501
        :rtype: datetime
        """
        return self._available_until

    @available_until.setter
    def available_until(self, available_until):
        """Sets the available_until of this InlineResponse2008ReservationBookings.

        The time and/or date which specifies when the availability slot/segment stops being available.   # noqa: E501

        :param available_until: The available_until of this InlineResponse2008ReservationBookings.  # noqa: E501
        :type: datetime
        """

        self._available_until = available_until

    @property
    def redemption_location_id(self):
        """Gets the redemption_location_id of this InlineResponse2008ReservationBookings.  # noqa: E501

        If applicableRedemptionLocationIds where sent as part of the feed/availability payload, then the chosen location will be sent in the request.   # noqa: E501

        :return: The redemption_location_id of this InlineResponse2008ReservationBookings.  # noqa: E501
        :rtype: str
        """
        return self._redemption_location_id

    @redemption_location_id.setter
    def redemption_location_id(self, redemption_location_id):
        """Sets the redemption_location_id of this InlineResponse2008ReservationBookings.

        If applicableRedemptionLocationIds where sent as part of the feed/availability payload, then the chosen location will be sent in the request.   # noqa: E501

        :param redemption_location_id: The redemption_location_id of this InlineResponse2008ReservationBookings.  # noqa: E501
        :type: str
        """

        self._redemption_location_id = redemption_location_id

    @property
    def attribute_ids(self):
        """Gets the attribute_ids of this InlineResponse2008ReservationBookings.  # noqa: E501

        Reference to the attribute values that this availability slot has.   # noqa: E501

        :return: The attribute_ids of this InlineResponse2008ReservationBookings.  # noqa: E501
        :rtype: list[str]
        """
        return self._attribute_ids

    @attribute_ids.setter
    def attribute_ids(self, attribute_ids):
        """Sets the attribute_ids of this InlineResponse2008ReservationBookings.

        Reference to the attribute values that this availability slot has.   # noqa: E501

        :param attribute_ids: The attribute_ids of this InlineResponse2008ReservationBookings.  # noqa: E501
        :type: list[str]
        """

        self._attribute_ids = attribute_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008ReservationBookings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008ReservationBookings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
