# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'fields': 'list[FormFieldFields]',
        'hint': 'str',
        'label': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fields': 'fields',
        'hint': 'hint',
        'label': 'label',
        'type': 'type',
        'value': 'value'
    }

    discriminator_value_class_map = {
            'TEXT'.lower(): '#/components/schemas/TextField',
            'GROUP'.lower(): '#/components/schemas/GroupField',
            'EMAIL'.lower(): '#/components/schemas/EmailField',
            'PHONE'.lower(): '#/components/schemas/PhoneField',
            'NUMBER'.lower(): '#/components/schemas/NumberField',
            'BOOLEAN'.lower(): '#/components/schemas/BooleanField',
    }

    def __init__(self, id=None, fields=None, hint=None, label=None, type=None, value=None):  # noqa: E501
        """FormField - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fields = None
        self._hint = None
        self._label = None
        self._type = None
        self._value = None
        self.discriminator = 'type'
        if id is not None:
            self.id = id
        if fields is not None:
            self.fields = fields
        if hint is not None:
            self.hint = hint
        if label is not None:
            self.label = label
        self.type = type
        if value is not None:
            self.value = value

    @property
    def id(self):
        """Gets the id of this FormField.  # noqa: E501

        id of this question. This is `required` only for the top level question, ie not required for question within the nested *fields* property.  # noqa: E501

        :return: The id of this FormField.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormField.

        id of this question. This is `required` only for the top level question, ie not required for question within the nested *fields* property.  # noqa: E501

        :param id: The id of this FormField.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def fields(self):
        """Gets the fields of this FormField.  # noqa: E501

        This specifies the fields which are grouped together. A group may contain zero-to-many child groups, and there is no limit to how many times this nesting can occur. This is `required` for a field of *type* `GROUP`, as it specifies the fields within a group. A non-group field may contain zero-to-many fields. This data structure is used to support UI controls such as radio buttons or drop downs (using the `TEXT` *type*). A non-group field cannot have nested fields under these *fields*, nor may it contain `GROUP` *type* fields (i.e. a non-group field must have a flat list of child fields). Additionally, the child fields must have the same *property* as their parent field, and they must also have a *value*.  # noqa: E501

        :return: The fields of this FormField.  # noqa: E501
        :rtype: list[FormFieldFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FormField.

        This specifies the fields which are grouped together. A group may contain zero-to-many child groups, and there is no limit to how many times this nesting can occur. This is `required` for a field of *type* `GROUP`, as it specifies the fields within a group. A non-group field may contain zero-to-many fields. This data structure is used to support UI controls such as radio buttons or drop downs (using the `TEXT` *type*). A non-group field cannot have nested fields under these *fields*, nor may it contain `GROUP` *type* fields (i.e. a non-group field must have a flat list of child fields). Additionally, the child fields must have the same *property* as their parent field, and they must also have a *value*.  # noqa: E501

        :param fields: The fields of this FormField.  # noqa: E501
        :type: list[FormFieldFields]
        """

        self._fields = fields

    @property
    def hint(self):
        """Gets the hint of this FormField.  # noqa: E501

        Specifies a short hint that describes the expected value for this field. This may be used by a client to render a hint or placeholder value inside of an input field.  # noqa: E501

        :return: The hint of this FormField.  # noqa: E501
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this FormField.

        Specifies a short hint that describes the expected value for this field. This may be used by a client to render a hint or placeholder value inside of an input field.  # noqa: E501

        :param hint: The hint of this FormField.  # noqa: E501
        :type: str
        """

        self._hint = hint

    @property
    def label(self):
        """Gets the label of this FormField.  # noqa: E501

        The label value to display for this checkout field.  # noqa: E501

        :return: The label of this FormField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormField.

        The label value to display for this checkout field.  # noqa: E501

        :param label: The label of this FormField.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this FormField.  # noqa: E501

        Enum of field types  # noqa: E501

        :return: The type of this FormField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormField.

        Enum of field types  # noqa: E501

        :param type: The type of this FormField.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["TEXT", "GROUP", "EMAIL", "PHONE", "NUMBER", "BOOLEAN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this FormField.  # noqa: E501

        The default value the client should use to populate this checkout field. For `BOOLEAN` types, this will be normalized to true or false when outputting the fields and will not be null. If the value is true, then it is recommended to display the UI control in the “on” state (e.g. checked for a checkbox or enabled for a toggle). For a `TEXT` type with child fields, this will indicate the selected or default value. This can be used to populate the UI control with a pre-selected value.  # noqa: E501

        :return: The value of this FormField.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FormField.

        The default value the client should use to populate this checkout field. For `BOOLEAN` types, this will be normalized to true or false when outputting the fields and will not be null. If the value is true, then it is recommended to display the UI control in the “on” state (e.g. checked for a checkbox or enabled for a toggle). For a `TEXT` type with child fields, this will indicate the selected or default value. This can be used to populate the UI control with a pre-selected value.  # noqa: E501

        :param value: The value of this FormField.  # noqa: E501
        :type: str
        """

        self._value = value

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
