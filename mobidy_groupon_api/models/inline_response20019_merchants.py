# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019Merchants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'images': 'list[InlineResponse20019Images]',
        'website_url': 'str',
        'contacts': 'list[AllOfinlineResponse20019MerchantsContactsItems]',
        'redemption_locations': 'list[AllOfinlineResponse20019MerchantsRedemptionLocationsItems]',
        'services': 'list[AllOfinlineResponse20019MerchantsServicesItems]',
        'attributes': 'list[AllOfinlineResponse20019MerchantsAttributesItems]',
        'writeups': 'list[AllOfinlineResponse20019MerchantsWriteupsItems]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'images': 'images',
        'website_url': 'websiteUrl',
        'contacts': 'contacts',
        'redemption_locations': 'redemptionLocations',
        'services': 'services',
        'attributes': 'attributes',
        'writeups': 'writeups'
    }

    def __init__(self, id=None, name=None, images=None, website_url=None, contacts=None, redemption_locations=None, services=None, attributes=None, writeups=None):  # noqa: E501
        """InlineResponse20019Merchants - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._images = None
        self._website_url = None
        self._contacts = None
        self._redemption_locations = None
        self._services = None
        self._attributes = None
        self._writeups = None
        self.discriminator = None
        self.id = id
        self.name = name
        if images is not None:
            self.images = images
        if website_url is not None:
            self.website_url = website_url
        self.contacts = contacts
        if redemption_locations is not None:
            self.redemption_locations = redemption_locations
        self.services = services
        if attributes is not None:
            self.attributes = attributes
        if writeups is not None:
            self.writeups = writeups

    @property
    def id(self):
        """Gets the id of this InlineResponse20019Merchants.  # noqa: E501

        The merchant id specified in the request.   # noqa: E501

        :return: The id of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20019Merchants.

        The merchant id specified in the request.   # noqa: E501

        :param id: The id of this InlineResponse20019Merchants.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20019Merchants.  # noqa: E501

        The name of the merchant/biz providing the services on Groupon.   # noqa: E501

        :return: The name of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20019Merchants.

        The name of the merchant/biz providing the services on Groupon.   # noqa: E501

        :param name: The name of this InlineResponse20019Merchants.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def images(self):
        """Gets the images of this InlineResponse20019Merchants.  # noqa: E501

        An ordered list of image URLs for this merchant, with the first one being featured as the principal one.   # noqa: E501

        :return: The images of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[InlineResponse20019Images]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this InlineResponse20019Merchants.

        An ordered list of image URLs for this merchant, with the first one being featured as the principal one.   # noqa: E501

        :param images: The images of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[InlineResponse20019Images]
        """

        self._images = images

    @property
    def website_url(self):
        """Gets the website_url of this InlineResponse20019Merchants.  # noqa: E501

        The website for the merchant.   # noqa: E501

        :return: The website_url of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this InlineResponse20019Merchants.

        The website for the merchant.   # noqa: E501

        :param website_url: The website_url of this InlineResponse20019Merchants.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def contacts(self):
        """Gets the contacts of this InlineResponse20019Merchants.  # noqa: E501

        A list of contacts for the merchant who can interact with Groupon   # noqa: E501

        :return: The contacts of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[AllOfinlineResponse20019MerchantsContactsItems]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this InlineResponse20019Merchants.

        A list of contacts for the merchant who can interact with Groupon   # noqa: E501

        :param contacts: The contacts of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[AllOfinlineResponse20019MerchantsContactsItems]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def redemption_locations(self):
        """Gets the redemption_locations of this InlineResponse20019Merchants.  # noqa: E501

        The list of locations for this merchant.   # noqa: E501

        :return: The redemption_locations of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[AllOfinlineResponse20019MerchantsRedemptionLocationsItems]
        """
        return self._redemption_locations

    @redemption_locations.setter
    def redemption_locations(self, redemption_locations):
        """Sets the redemption_locations of this InlineResponse20019Merchants.

        The list of locations for this merchant.   # noqa: E501

        :param redemption_locations: The redemption_locations of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[AllOfinlineResponse20019MerchantsRedemptionLocationsItems]
        """

        self._redemption_locations = redemption_locations

    @property
    def services(self):
        """Gets the services of this InlineResponse20019Merchants.  # noqa: E501

        The individual services offered by the merchant.   # noqa: E501

        :return: The services of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[AllOfinlineResponse20019MerchantsServicesItems]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this InlineResponse20019Merchants.

        The individual services offered by the merchant.   # noqa: E501

        :param services: The services of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[AllOfinlineResponse20019MerchantsServicesItems]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def attributes(self):
        """Gets the attributes of this InlineResponse20019Merchants.  # noqa: E501

        Summary of attributes of all the availability slots with their localized text. The availability will be filtered by these attributes.  # noqa: E501

        :return: The attributes of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[AllOfinlineResponse20019MerchantsAttributesItems]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InlineResponse20019Merchants.

        Summary of attributes of all the availability slots with their localized text. The availability will be filtered by these attributes.  # noqa: E501

        :param attributes: The attributes of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[AllOfinlineResponse20019MerchantsAttributesItems]
        """

        self._attributes = attributes

    @property
    def writeups(self):
        """Gets the writeups of this InlineResponse20019Merchants.  # noqa: E501

        An array of localized text regarding the merchant business.  # noqa: E501

        :return: The writeups of this InlineResponse20019Merchants.  # noqa: E501
        :rtype: list[AllOfinlineResponse20019MerchantsWriteupsItems]
        """
        return self._writeups

    @writeups.setter
    def writeups(self, writeups):
        """Sets the writeups of this InlineResponse20019Merchants.

        An array of localized text regarding the merchant business.  # noqa: E501

        :param writeups: The writeups of this InlineResponse20019Merchants.  # noqa: E501
        :type: list[AllOfinlineResponse20019MerchantsWriteupsItems]
        """

        self._writeups = writeups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019Merchants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019Merchants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
