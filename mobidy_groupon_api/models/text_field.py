# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TextField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pattern': 'str',
        'min_length': 'int',
        'max_length': 'int'
    }

    attribute_map = {
        'pattern': 'pattern',
        'min_length': 'minLength',
        'max_length': 'maxLength'
    }

    def __init__(self, pattern=None, min_length=None, max_length=None):  # noqa: E501
        """TextField - a model defined in Swagger"""  # noqa: E501
        self._pattern = None
        self._min_length = None
        self._max_length = None
        self.discriminator = None
        if pattern is not None:
            self.pattern = pattern
        if min_length is not None:
            self.min_length = min_length
        if max_length is not None:
            self.max_length = max_length

    @property
    def pattern(self):
        """Gets the pattern of this TextField.  # noqa: E501

        A regular expression used to validate input. Any input which matches the regular expression will be considered valid. If the client is unable to parse/understand the pattern, then it will not apply any validation and leave it up to the partner to validate.  # noqa: E501

        :return: The pattern of this TextField.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this TextField.

        A regular expression used to validate input. Any input which matches the regular expression will be considered valid. If the client is unable to parse/understand the pattern, then it will not apply any validation and leave it up to the partner to validate.  # noqa: E501

        :param pattern: The pattern of this TextField.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def min_length(self):
        """Gets the min_length of this TextField.  # noqa: E501

        An integer value to validate the input. A valid value must contain at least minLength of characters.  # noqa: E501

        :return: The min_length of this TextField.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this TextField.

        An integer value to validate the input. A valid value must contain at least minLength of characters.  # noqa: E501

        :param min_length: The min_length of this TextField.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this TextField.  # noqa: E501

        An integer value to validate the input. A valid value must contain at most maxLength characters.  # noqa: E501

        :return: The max_length of this TextField.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TextField.

        An integer value to validate the input. A valid value must contain at most maxLength characters.  # noqa: E501

        :param max_length: The max_length of this TextField.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
