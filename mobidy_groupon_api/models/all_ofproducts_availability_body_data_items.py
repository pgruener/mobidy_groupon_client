# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfproductsAvailabilityBodyDataItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quantity': 'int',
        'purchaser_answers': 'list[dict(str, str)]',
        'bookings': 'list[object]'
    }

    attribute_map = {
        'quantity': 'quantity',
        'purchaser_answers': 'purchaserAnswers',
        'bookings': 'bookings'
    }

    def __init__(self, quantity=None, purchaser_answers=None, bookings=None):  # noqa: E501
        """AllOfproductsAvailabilityBodyDataItems - a model defined in Swagger"""  # noqa: E501
        self._quantity = None
        self._purchaser_answers = None
        self._bookings = None
        self.discriminator = None
        if quantity is not None:
            self.quantity = quantity
        if purchaser_answers is not None:
            self.purchaser_answers = purchaser_answers
        if bookings is not None:
            self.bookings = bookings

    @property
    def quantity(self):
        """Gets the quantity of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501

        The quantity of this product being reserved, usually used for voucher purchases.  When `prereservationId` is passed, then this attribute will not be included in the request since the quantity has already been established during the iframe flow.    When sending `bookings` this attribute will not be included since the quantity is determined by the number of bookings.   # noqa: E501

        :return: The quantity of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AllOfproductsAvailabilityBodyDataItems.

        The quantity of this product being reserved, usually used for voucher purchases.  When `prereservationId` is passed, then this attribute will not be included in the request since the quantity has already been established during the iframe flow.    When sending `bookings` this attribute will not be included since the quantity is determined by the number of bookings.   # noqa: E501

        :param quantity: The quantity of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def purchaser_answers(self):
        """Gets the purchaser_answers of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501

        DEPRECATED, use the answers provided in the reserve call instead.    Answers provided by the purchaser on the questions of this product.   See *offers.products.purchaserQuestionIds* in ingestion feed.   # noqa: E501

        :return: The purchaser_answers of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._purchaser_answers

    @purchaser_answers.setter
    def purchaser_answers(self, purchaser_answers):
        """Sets the purchaser_answers of this AllOfproductsAvailabilityBodyDataItems.

        DEPRECATED, use the answers provided in the reserve call instead.    Answers provided by the purchaser on the questions of this product.   See *offers.products.purchaserQuestionIds* in ingestion feed.   # noqa: E501

        :param purchaser_answers: The purchaser_answers of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._purchaser_answers = purchaser_answers

    @property
    def bookings(self):
        """Gets the bookings of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501

        This can be used when booking more than one availability slot or if there are multiple availability slots for the same time range. Note that purchaserAnswers are not going to be present in this API call, they will be sent in the Reserve call instead.  # noqa: E501

        :return: The bookings of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :rtype: list[object]
        """
        return self._bookings

    @bookings.setter
    def bookings(self, bookings):
        """Sets the bookings of this AllOfproductsAvailabilityBodyDataItems.

        This can be used when booking more than one availability slot or if there are multiple availability slots for the same time range. Note that purchaserAnswers are not going to be present in this API call, they will be sent in the Reserve call instead.  # noqa: E501

        :param bookings: The bookings of this AllOfproductsAvailabilityBodyDataItems.  # noqa: E501
        :type: list[object]
        """

        self._bookings = bookings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfproductsAvailabilityBodyDataItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfproductsAvailabilityBodyDataItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
