# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1BookingsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_id': 'str',
        'groupon_customer_service_id': 'str',
        'bookings': 'list[Grouponv1bookingsBookings]',
        'purchaser_details': 'Grouponv1bookingsPurchaserDetails',
        'booking_type': 'str'
    }

    attribute_map = {
        'merchant_id': 'merchantId',
        'groupon_customer_service_id': 'grouponCustomerServiceId',
        'bookings': 'bookings',
        'purchaser_details': 'purchaserDetails',
        'booking_type': 'bookingType'
    }

    def __init__(self, merchant_id=None, groupon_customer_service_id=None, bookings=None, purchaser_details=None, booking_type=None):  # noqa: E501
        """V1BookingsBody - a model defined in Swagger"""  # noqa: E501
        self._merchant_id = None
        self._groupon_customer_service_id = None
        self._bookings = None
        self._purchaser_details = None
        self._booking_type = None
        self.discriminator = None
        self.merchant_id = merchant_id
        if groupon_customer_service_id is not None:
            self.groupon_customer_service_id = groupon_customer_service_id
        self.bookings = bookings
        if purchaser_details is not None:
            self.purchaser_details = purchaser_details
        self.booking_type = booking_type

    @property
    def merchant_id(self):
        """Gets the merchant_id of this V1BookingsBody.  # noqa: E501

        the ID of the merchant  # noqa: E501

        :return: The merchant_id of this V1BookingsBody.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this V1BookingsBody.

        the ID of the merchant  # noqa: E501

        :param merchant_id: The merchant_id of this V1BookingsBody.  # noqa: E501
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def groupon_customer_service_id(self):
        """Gets the groupon_customer_service_id of this V1BookingsBody.  # noqa: E501

        Groupon’s Customer Service reference ID for the purchase associated with this booking. This can be used when communicating with Groupon Customer Service to reference the purchase.   # noqa: E501

        :return: The groupon_customer_service_id of this V1BookingsBody.  # noqa: E501
        :rtype: str
        """
        return self._groupon_customer_service_id

    @groupon_customer_service_id.setter
    def groupon_customer_service_id(self, groupon_customer_service_id):
        """Sets the groupon_customer_service_id of this V1BookingsBody.

        Groupon’s Customer Service reference ID for the purchase associated with this booking. This can be used when communicating with Groupon Customer Service to reference the purchase.   # noqa: E501

        :param groupon_customer_service_id: The groupon_customer_service_id of this V1BookingsBody.  # noqa: E501
        :type: str
        """

        self._groupon_customer_service_id = groupon_customer_service_id

    @property
    def bookings(self):
        """Gets the bookings of this V1BookingsBody.  # noqa: E501

        This is a list of bookings that should be created.  # noqa: E501

        :return: The bookings of this V1BookingsBody.  # noqa: E501
        :rtype: list[Grouponv1bookingsBookings]
        """
        return self._bookings

    @bookings.setter
    def bookings(self, bookings):
        """Sets the bookings of this V1BookingsBody.

        This is a list of bookings that should be created.  # noqa: E501

        :param bookings: The bookings of this V1BookingsBody.  # noqa: E501
        :type: list[Grouponv1bookingsBookings]
        """
        if bookings is None:
            raise ValueError("Invalid value for `bookings`, must not be `None`")  # noqa: E501

        self._bookings = bookings

    @property
    def purchaser_details(self):
        """Gets the purchaser_details of this V1BookingsBody.  # noqa: E501


        :return: The purchaser_details of this V1BookingsBody.  # noqa: E501
        :rtype: Grouponv1bookingsPurchaserDetails
        """
        return self._purchaser_details

    @purchaser_details.setter
    def purchaser_details(self, purchaser_details):
        """Sets the purchaser_details of this V1BookingsBody.


        :param purchaser_details: The purchaser_details of this V1BookingsBody.  # noqa: E501
        :type: Grouponv1bookingsPurchaserDetails
        """

        self._purchaser_details = purchaser_details

    @property
    def booking_type(self):
        """Gets the booking_type of this V1BookingsBody.  # noqa: E501

        Determines whether the bookings should be created (as `confirmed`), or only pre-reserved (`hold`) until confirmation.   # noqa: E501

        :return: The booking_type of this V1BookingsBody.  # noqa: E501
        :rtype: str
        """
        return self._booking_type

    @booking_type.setter
    def booking_type(self, booking_type):
        """Sets the booking_type of this V1BookingsBody.

        Determines whether the bookings should be created (as `confirmed`), or only pre-reserved (`hold`) until confirmation.   # noqa: E501

        :param booking_type: The booking_type of this V1BookingsBody.  # noqa: E501
        :type: str
        """
        if booking_type is None:
            raise ValueError("Invalid value for `booking_type`, must not be `None`")  # noqa: E501
        allowed_values = ["hold", "confirmed"]  # noqa: E501
        if booking_type not in allowed_values:
            raise ValueError(
                "Invalid value for `booking_type` ({0}), must be one of {1}"  # noqa: E501
                .format(booking_type, allowed_values)
            )

        self._booking_type = booking_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1BookingsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BookingsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
