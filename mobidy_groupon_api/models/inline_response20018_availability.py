# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018Availability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'available_at': 'datetime',
        'available_until': 'datetime',
        'service_ids': 'list[str]',
        'attribute_ids': 'list[str]',
        'estimated_remaining_quantity': 'int',
        'pricing': 'InlineResponse20018Pricing'
    }

    attribute_map = {
        'id': 'id',
        'available_at': 'availableAt',
        'available_until': 'availableUntil',
        'service_ids': 'serviceIds',
        'attribute_ids': 'attributeIds',
        'estimated_remaining_quantity': 'estimatedRemainingQuantity',
        'pricing': 'pricing'
    }

    def __init__(self, id=None, available_at=None, available_until=None, service_ids=None, attribute_ids=None, estimated_remaining_quantity=None, pricing=None):  # noqa: E501
        """InlineResponse20018Availability - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._available_at = None
        self._available_until = None
        self._service_ids = None
        self._attribute_ids = None
        self._estimated_remaining_quantity = None
        self._pricing = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.available_at = available_at
        if available_until is not None:
            self.available_until = available_until
        self.service_ids = service_ids
        if attribute_ids is not None:
            self.attribute_ids = attribute_ids
        if estimated_remaining_quantity is not None:
            self.estimated_remaining_quantity = estimated_remaining_quantity
        if pricing is not None:
            self.pricing = pricing

    @property
    def id(self):
        """Gets the id of this InlineResponse20018Availability.  # noqa: E501

        The partner’s external unique identifier for this availability information. The expectation is that this id will uniquely identify the data in the partner’s system.   # noqa: E501

        :return: The id of this InlineResponse20018Availability.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20018Availability.

        The partner’s external unique identifier for this availability information. The expectation is that this id will uniquely identify the data in the partner’s system.   # noqa: E501

        :param id: The id of this InlineResponse20018Availability.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def available_at(self):
        """Gets the available_at of this InlineResponse20018Availability.  # noqa: E501

        The date and time which specifies when the availability slot/segment first becomes available. This field is inclusive in terms of the availability, meaning that the slot/segment is available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :return: The available_at of this InlineResponse20018Availability.  # noqa: E501
        :rtype: datetime
        """
        return self._available_at

    @available_at.setter
    def available_at(self, available_at):
        """Sets the available_at of this InlineResponse20018Availability.

        The date and time which specifies when the availability slot/segment first becomes available. This field is inclusive in terms of the availability, meaning that the slot/segment is available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :param available_at: The available_at of this InlineResponse20018Availability.  # noqa: E501
        :type: datetime
        """
        if available_at is None:
            raise ValueError("Invalid value for `available_at`, must not be `None`")  # noqa: E501

        self._available_at = available_at

    @property
    def available_until(self):
        """Gets the available_until of this InlineResponse20018Availability.  # noqa: E501

        The date and time which specifies when the availability slot/segment stops being available. This field is exclusive in terms of the availability, meaning that the slot/segment is not available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :return: The available_until of this InlineResponse20018Availability.  # noqa: E501
        :rtype: datetime
        """
        return self._available_until

    @available_until.setter
    def available_until(self, available_until):
        """Sets the available_until of this InlineResponse20018Availability.

        The date and time which specifies when the availability slot/segment stops being available. This field is exclusive in terms of the availability, meaning that the slot/segment is not available exactly at the moment this datetime specifies. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :param available_until: The available_until of this InlineResponse20018Availability.  # noqa: E501
        :type: datetime
        """

        self._available_until = available_until

    @property
    def service_ids(self):
        """Gets the service_ids of this InlineResponse20018Availability.  # noqa: E501

        reference to the services that are available at this slot (*merchant[].services[].id*).  # noqa: E501

        :return: The service_ids of this InlineResponse20018Availability.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this InlineResponse20018Availability.

        reference to the services that are available at this slot (*merchant[].services[].id*).  # noqa: E501

        :param service_ids: The service_ids of this InlineResponse20018Availability.  # noqa: E501
        :type: list[str]
        """
        if service_ids is None:
            raise ValueError("Invalid value for `service_ids`, must not be `None`")  # noqa: E501

        self._service_ids = service_ids

    @property
    def attribute_ids(self):
        """Gets the attribute_ids of this InlineResponse20018Availability.  # noqa: E501

        reference to the attribute values that this availability slot has (*merchant[].attributes[].values[].id*).  # noqa: E501

        :return: The attribute_ids of this InlineResponse20018Availability.  # noqa: E501
        :rtype: list[str]
        """
        return self._attribute_ids

    @attribute_ids.setter
    def attribute_ids(self, attribute_ids):
        """Sets the attribute_ids of this InlineResponse20018Availability.

        reference to the attribute values that this availability slot has (*merchant[].attributes[].values[].id*).  # noqa: E501

        :param attribute_ids: The attribute_ids of this InlineResponse20018Availability.  # noqa: E501
        :type: list[str]
        """

        self._attribute_ids = attribute_ids

    @property
    def estimated_remaining_quantity(self):
        """Gets the estimated_remaining_quantity of this InlineResponse20018Availability.  # noqa: E501

        The estimated quantity remaining for this availability slot/segment. This value does not need to be real time, as it is used to inform remaining quantity but not control purchasing.   # noqa: E501

        :return: The estimated_remaining_quantity of this InlineResponse20018Availability.  # noqa: E501
        :rtype: int
        """
        return self._estimated_remaining_quantity

    @estimated_remaining_quantity.setter
    def estimated_remaining_quantity(self, estimated_remaining_quantity):
        """Sets the estimated_remaining_quantity of this InlineResponse20018Availability.

        The estimated quantity remaining for this availability slot/segment. This value does not need to be real time, as it is used to inform remaining quantity but not control purchasing.   # noqa: E501

        :param estimated_remaining_quantity: The estimated_remaining_quantity of this InlineResponse20018Availability.  # noqa: E501
        :type: int
        """

        self._estimated_remaining_quantity = estimated_remaining_quantity

    @property
    def pricing(self):
        """Gets the pricing of this InlineResponse20018Availability.  # noqa: E501


        :return: The pricing of this InlineResponse20018Availability.  # noqa: E501
        :rtype: InlineResponse20018Pricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this InlineResponse20018Availability.


        :param pricing: The pricing of this InlineResponse20018Availability.  # noqa: E501
        :type: InlineResponse20018Pricing
        """

        self._pricing = pricing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018Availability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018Availability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
