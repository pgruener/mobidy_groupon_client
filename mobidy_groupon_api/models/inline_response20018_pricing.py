# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018Pricing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'original_price': 'InlineResponse20018PricingOriginalPrice',
        'discounted_price': 'InlineResponse20018PricingDiscountedPrice'
    }

    attribute_map = {
        'currency_code': 'currencyCode',
        'original_price': 'originalPrice',
        'discounted_price': 'discountedPrice'
    }

    def __init__(self, currency_code=None, original_price=None, discounted_price=None):  # noqa: E501
        """InlineResponse20018Pricing - a model defined in Swagger"""  # noqa: E501
        self._currency_code = None
        self._original_price = None
        self._discounted_price = None
        self.discriminator = None
        self.currency_code = currency_code
        self.original_price = original_price
        if discounted_price is not None:
            self.discounted_price = discounted_price

    @property
    def currency_code(self):
        """Gets the currency_code of this InlineResponse20018Pricing.  # noqa: E501

        An uppercase, three letter [ISO-4217](http://www.iso.org/iso/home/standards/currency_codes.htm) currency code for all prices.   # noqa: E501

        :return: The currency_code of this InlineResponse20018Pricing.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InlineResponse20018Pricing.

        An uppercase, three letter [ISO-4217](http://www.iso.org/iso/home/standards/currency_codes.htm) currency code for all prices.   # noqa: E501

        :param currency_code: The currency_code of this InlineResponse20018Pricing.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def original_price(self):
        """Gets the original_price of this InlineResponse20018Pricing.  # noqa: E501


        :return: The original_price of this InlineResponse20018Pricing.  # noqa: E501
        :rtype: InlineResponse20018PricingOriginalPrice
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this InlineResponse20018Pricing.


        :param original_price: The original_price of this InlineResponse20018Pricing.  # noqa: E501
        :type: InlineResponse20018PricingOriginalPrice
        """
        if original_price is None:
            raise ValueError("Invalid value for `original_price`, must not be `None`")  # noqa: E501

        self._original_price = original_price

    @property
    def discounted_price(self):
        """Gets the discounted_price of this InlineResponse20018Pricing.  # noqa: E501


        :return: The discounted_price of this InlineResponse20018Pricing.  # noqa: E501
        :rtype: InlineResponse20018PricingDiscountedPrice
        """
        return self._discounted_price

    @discounted_price.setter
    def discounted_price(self, discounted_price):
        """Sets the discounted_price of this InlineResponse20018Pricing.


        :param discounted_price: The discounted_price of this InlineResponse20018Pricing.  # noqa: E501
        :type: InlineResponse20018PricingDiscountedPrice
        """

        self._discounted_price = discounted_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018Pricing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018Pricing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
