# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004Meta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prereservation_id': 'str'
    }

    attribute_map = {
        'prereservation_id': 'prereservationId'
    }

    def __init__(self, prereservation_id=None):  # noqa: E501
        """InlineResponse2004Meta - a model defined in Swagger"""  # noqa: E501
        self._prereservation_id = None
        self.discriminator = None
        if prereservation_id is not None:
            self.prereservation_id = prereservation_id

    @property
    def prereservation_id(self):
        """Gets the prereservation_id of this InlineResponse2004Meta.  # noqa: E501

        The pre-reservation ID generated by this availability check. If present, this will be passed into the reserve call. It will override the pre-reservation ID passed in the request, so if this value is different from the one passed in the request this value will be used in the reserve call. If using Base64 to encode a value for the pre-reservation ID, it is strongly advised to use URL safe Base64 encoding without padding.   # noqa: E501

        :return: The prereservation_id of this InlineResponse2004Meta.  # noqa: E501
        :rtype: str
        """
        return self._prereservation_id

    @prereservation_id.setter
    def prereservation_id(self, prereservation_id):
        """Sets the prereservation_id of this InlineResponse2004Meta.

        The pre-reservation ID generated by this availability check. If present, this will be passed into the reserve call. It will override the pre-reservation ID passed in the request, so if this value is different from the one passed in the request this value will be used in the reserve call. If using Base64 to encode a value for the pre-reservation ID, it is strongly advised to use URL safe Base64 encoding without padding.   # noqa: E501

        :param prereservation_id: The prereservation_id of this InlineResponse2004Meta.  # noqa: E501
        :type: str
        """

        self._prereservation_id = prereservation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Meta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Meta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
