# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Partnerspartnerv1bookingsBookings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'merchant_id': 'str',
        'status': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'merchant_id': 'merchantId',
        'status': 'status',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, merchant_id=None, status=None, updated_at=None):  # noqa: E501
        """Partnerspartnerv1bookingsBookings - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._merchant_id = None
        self._status = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.merchant_id = merchant_id
        self.status = status
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Partnerspartnerv1bookingsBookings.  # noqa: E501

        The partner-generated id for this booking. This will be the id returned from the Booking Creation API call.   # noqa: E501

        :return: The id of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partnerspartnerv1bookingsBookings.

        The partner-generated id for this booking. This will be the id returned from the Booking Creation API call.   # noqa: E501

        :param id: The id of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Partnerspartnerv1bookingsBookings.  # noqa: E501

        The merchant id for this booking.  # noqa: E501

        :return: The merchant_id of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Partnerspartnerv1bookingsBookings.

        The merchant id for this booking.  # noqa: E501

        :param merchant_id: The merchant_id of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def status(self):
        """Gets the status of this Partnerspartnerv1bookingsBookings.  # noqa: E501

        The update for this booking: - `check-in`: the customer successfully checked-in for the booking. - `no-show`: the customer missed the booking. - `cancelled`: the booking was cancelled by the merchant.   # noqa: E501

        :return: The status of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Partnerspartnerv1bookingsBookings.

        The update for this booking: - `check-in`: the customer successfully checked-in for the booking. - `no-show`: the customer missed the booking. - `cancelled`: the booking was cancelled by the merchant.   # noqa: E501

        :param status: The status of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["check-in", "no-show", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Partnerspartnerv1bookingsBookings.  # noqa: E501

        A datetime representing when the booking was last updated. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :return: The updated_at of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Partnerspartnerv1bookingsBookings.

        A datetime representing when the booking was last updated. The format is ISO-8601 combined date and time with timezone (also known as Internet date/time format: https://tools.ietf.org/html/rfc3339#section-5).   # noqa: E501

        :param updated_at: The updated_at of this Partnerspartnerv1bookingsBookings.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Partnerspartnerv1bookingsBookings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partnerspartnerv1bookingsBookings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
