# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema_version': 'str',
        'offers': 'list[InlineResponse20015Offers]',
        'purchaser_questions': 'list[InlineResponse20015PurchaserQuestions]'
    }

    attribute_map = {
        'schema_version': 'schemaVersion',
        'offers': 'offers',
        'purchaser_questions': 'purchaserQuestions'
    }

    def __init__(self, schema_version=None, offers=None, purchaser_questions=None):  # noqa: E501
        """InlineResponse20015 - a model defined in Swagger"""  # noqa: E501
        self._schema_version = None
        self._offers = None
        self._purchaser_questions = None
        self.discriminator = None
        self.schema_version = schema_version
        self.offers = offers
        if purchaser_questions is not None:
            self.purchaser_questions = purchaser_questions

    @property
    def schema_version(self):
        """Gets the schema_version of this InlineResponse20015.  # noqa: E501

        The version of the schema being used for the feed.  This is used to allow compatibility between multiple schema versions.   # noqa: E501

        :return: The schema_version of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this InlineResponse20015.

        The version of the schema being used for the feed.  This is used to allow compatibility between multiple schema versions.   # noqa: E501

        :param schema_version: The schema_version of this InlineResponse20015.  # noqa: E501
        :type: str
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501
        allowed_values = ["v2.3"]  # noqa: E501
        if schema_version not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_version` ({0}), must be one of {1}"  # noqa: E501
                .format(schema_version, allowed_values)
            )

        self._schema_version = schema_version

    @property
    def offers(self):
        """Gets the offers of this InlineResponse20015.  # noqa: E501

        The top level container which holds all the offer entities.  # noqa: E501

        :return: The offers of this InlineResponse20015.  # noqa: E501
        :rtype: list[InlineResponse20015Offers]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this InlineResponse20015.

        The top level container which holds all the offer entities.  # noqa: E501

        :param offers: The offers of this InlineResponse20015.  # noqa: E501
        :type: list[InlineResponse20015Offers]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")  # noqa: E501

        self._offers = offers

    @property
    def purchaser_questions(self):
        """Gets the purchaser_questions of this InlineResponse20015.  # noqa: E501

        Definition of localized questions that will be asked to the purchaser. These questions will be referenced from the products and their availabilities.  # noqa: E501

        :return: The purchaser_questions of this InlineResponse20015.  # noqa: E501
        :rtype: list[InlineResponse20015PurchaserQuestions]
        """
        return self._purchaser_questions

    @purchaser_questions.setter
    def purchaser_questions(self, purchaser_questions):
        """Sets the purchaser_questions of this InlineResponse20015.

        Definition of localized questions that will be asked to the purchaser. These questions will be referenced from the products and their availabilities.  # noqa: E501

        :param purchaser_questions: The purchaser_questions of this InlineResponse20015.  # noqa: E501
        :type: list[InlineResponse20015PurchaserQuestions]
        """

        self._purchaser_questions = purchaser_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
