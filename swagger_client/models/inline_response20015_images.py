# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015Images(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'type': 'str'
    }

    attribute_map = {
        'url': 'url',
        'type': 'type'
    }

    def __init__(self, url=None, type=None):  # noqa: E501
        """InlineResponse20015Images - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._type = None
        self.discriminator = None
        self.url = url
        if type is not None:
            self.type = type

    @property
    def url(self):
        """Gets the url of this InlineResponse20015Images.  # noqa: E501

        The URL for this image.  This should be a publicly accessible URL which the Groupon system can reach and download the image for.  The URL should also be to the highest resolution image available. The Groupon system will automatically resize images to for each use case, but needs the full size image to use as the source.   # noqa: E501

        :return: The url of this InlineResponse20015Images.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20015Images.

        The URL for this image.  This should be a publicly accessible URL which the Groupon system can reach and download the image for.  The URL should also be to the highest resolution image available. The Groupon system will automatically resize images to for each use case, but needs the full size image to use as the source.   # noqa: E501

        :param url: The url of this InlineResponse20015Images.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def type(self):
        """Gets the type of this InlineResponse20015Images.  # noqa: E501

        The type for this image. This is used to help identify the intent of the image, so it can be best utilized in different contexts and for different usages.   # noqa: E501

        :return: The type of this InlineResponse20015Images.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20015Images.

        The type for this image. This is used to help identify the intent of the image, so it can be best utilized in different contexts and for different usages.   # noqa: E501

        :param type: The type of this InlineResponse20015Images.  # noqa: E501
        :type: str
        """
        allowed_values = ["logo", "header"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015Images, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015Images):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
