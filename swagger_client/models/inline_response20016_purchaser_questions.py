# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20016PurchaserQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locale': 'str',
        'questions': 'list[Paths1groupon1v11feedgetresponses200contentapplication1jsonschemapropertiespurchaserQuestionsitemspropertiesquestionsitems]'
    }

    attribute_map = {
        'locale': 'locale',
        'questions': 'questions'
    }

    def __init__(self, locale=None, questions=None):  # noqa: E501
        """InlineResponse20016PurchaserQuestions - a model defined in Swagger"""  # noqa: E501
        self._locale = None
        self._questions = None
        self.discriminator = None
        self.locale = locale
        self.questions = questions

    @property
    def locale(self):
        """Gets the locale of this InlineResponse20016PurchaserQuestions.  # noqa: E501

        The locale and country code which represents the language for the content. This should use the ISO-3166-1 and UN M.49 variation of the IETF language tag (https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49).   # noqa: E501

        :return: The locale of this InlineResponse20016PurchaserQuestions.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this InlineResponse20016PurchaserQuestions.

        The locale and country code which represents the language for the content. This should use the ISO-3166-1 and UN M.49 variation of the IETF language tag (https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49).   # noqa: E501

        :param locale: The locale of this InlineResponse20016PurchaserQuestions.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def questions(self):
        """Gets the questions of this InlineResponse20016PurchaserQuestions.  # noqa: E501

        Questions template to be answered by the purchaser.  # noqa: E501

        :return: The questions of this InlineResponse20016PurchaserQuestions.  # noqa: E501
        :rtype: list[Paths1groupon1v11feedgetresponses200contentapplication1jsonschemapropertiespurchaserQuestionsitemspropertiesquestionsitems]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this InlineResponse20016PurchaserQuestions.

        Questions template to be answered by the purchaser.  # noqa: E501

        :param questions: The questions of this InlineResponse20016PurchaserQuestions.  # noqa: E501
        :type: list[Paths1groupon1v11feedgetresponses200contentapplication1jsonschemapropertiespurchaserQuestionsitemspropertiesquestionsitems]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016PurchaserQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016PurchaserQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
