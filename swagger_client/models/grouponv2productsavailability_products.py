# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Grouponv2productsavailabilityProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'discount_manager': 'str',
        'availabilities': 'list[Grouponv2productsavailabilityAvailabilities]'
    }

    attribute_map = {
        'product_id': 'productId',
        'discount_manager': 'discountManager',
        'availabilities': 'availabilities'
    }

    def __init__(self, product_id=None, discount_manager=None, availabilities=None):  # noqa: E501
        """Grouponv2productsavailabilityProducts - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._discount_manager = None
        self._availabilities = None
        self.discriminator = None
        self.product_id = product_id
        self.discount_manager = discount_manager
        self.availabilities = availabilities

    @property
    def product_id(self):
        """Gets the product_id of this Grouponv2productsavailabilityProducts.  # noqa: E501

        The Partner supplied id for the product.  # noqa: E501

        :return: The product_id of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Grouponv2productsavailabilityProducts.

        The Partner supplied id for the product.  # noqa: E501

        :param product_id: The product_id of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def discount_manager(self):
        """Gets the discount_manager of this Grouponv2productsavailabilityProducts.  # noqa: E501

        who will be responsible to calculate customerBuyPrice and grouponBuyPrice.  # noqa: E501

        :return: The discount_manager of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :rtype: str
        """
        return self._discount_manager

    @discount_manager.setter
    def discount_manager(self, discount_manager):
        """Sets the discount_manager of this Grouponv2productsavailabilityProducts.

        who will be responsible to calculate customerBuyPrice and grouponBuyPrice.  # noqa: E501

        :param discount_manager: The discount_manager of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :type: str
        """
        if discount_manager is None:
            raise ValueError("Invalid value for `discount_manager`, must not be `None`")  # noqa: E501
        allowed_values = ["Groupon", "Partner"]  # noqa: E501
        if discount_manager not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_manager` ({0}), must be one of {1}"  # noqa: E501
                .format(discount_manager, allowed_values)
            )

        self._discount_manager = discount_manager

    @property
    def availabilities(self):
        """Gets the availabilities of this Grouponv2productsavailabilityProducts.  # noqa: E501

        This can be used when booking more than one availability slot or if there are multiple availability slots for the same time range.  # noqa: E501

        :return: The availabilities of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :rtype: list[Grouponv2productsavailabilityAvailabilities]
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this Grouponv2productsavailabilityProducts.

        This can be used when booking more than one availability slot or if there are multiple availability slots for the same time range.  # noqa: E501

        :param availabilities: The availabilities of this Grouponv2productsavailabilityProducts.  # noqa: E501
        :type: list[Grouponv2productsavailabilityAvailabilities]
        """
        if availabilities is None:
            raise ValueError("Invalid value for `availabilities`, must not be `None`")  # noqa: E501

        self._availabilities = availabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Grouponv2productsavailabilityProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Grouponv2productsavailabilityProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
