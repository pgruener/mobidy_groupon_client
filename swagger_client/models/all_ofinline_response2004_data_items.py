# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfinlineResponse2004DataItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'quantity_summary': 'object',
        'price_summary': 'object',
        'prereservation_price_summary': 'object',
        'writeups': 'object',
        'reserved_units': 'list[object]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'quantity_summary': 'quantitySummary',
        'price_summary': 'priceSummary',
        'prereservation_price_summary': 'prereservationPriceSummary',
        'writeups': 'writeups',
        'reserved_units': 'reservedUnits'
    }

    def __init__(self, category_id=None, quantity_summary=None, price_summary=None, prereservation_price_summary=None, writeups=None, reserved_units=None):  # noqa: E501
        """AllOfinlineResponse2004DataItems - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._quantity_summary = None
        self._price_summary = None
        self._prereservation_price_summary = None
        self._writeups = None
        self._reserved_units = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if quantity_summary is not None:
            self.quantity_summary = quantity_summary
        self.price_summary = price_summary
        if prereservation_price_summary is not None:
            self.prereservation_price_summary = prereservation_price_summary
        if writeups is not None:
            self.writeups = writeups
        if reserved_units is not None:
            self.reserved_units = reserved_units

    @property
    def category_id(self):
        """Gets the category_id of this AllOfinlineResponse2004DataItems.  # noqa: E501

        The categorization for this product.  This field is a uuid and the only acceptable values are the provided categorization uuids.   # noqa: E501

        :return: The category_id of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AllOfinlineResponse2004DataItems.

        The categorization for this product.  This field is a uuid and the only acceptable values are the provided categorization uuids.   # noqa: E501

        :param category_id: The category_id of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def quantity_summary(self):
        """Gets the quantity_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501


        :return: The quantity_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: object
        """
        return self._quantity_summary

    @quantity_summary.setter
    def quantity_summary(self, quantity_summary):
        """Sets the quantity_summary of this AllOfinlineResponse2004DataItems.


        :param quantity_summary: The quantity_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: object
        """

        self._quantity_summary = quantity_summary

    @property
    def price_summary(self):
        """Gets the price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501


        :return: The price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: object
        """
        return self._price_summary

    @price_summary.setter
    def price_summary(self, price_summary):
        """Sets the price_summary of this AllOfinlineResponse2004DataItems.


        :param price_summary: The price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: object
        """
        if price_summary is None:
            raise ValueError("Invalid value for `price_summary`, must not be `None`")  # noqa: E501

        self._price_summary = price_summary

    @property
    def prereservation_price_summary(self):
        """Gets the prereservation_price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501

        Object which contains the price associated with the pre-reservation ID if it has changed. This object should only be returned if there was a price change, and the price.amount value must differ from the priceSummary.price.amount value.   # noqa: E501

        :return: The prereservation_price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: object
        """
        return self._prereservation_price_summary

    @prereservation_price_summary.setter
    def prereservation_price_summary(self, prereservation_price_summary):
        """Sets the prereservation_price_summary of this AllOfinlineResponse2004DataItems.

        Object which contains the price associated with the pre-reservation ID if it has changed. This object should only be returned if there was a price change, and the price.amount value must differ from the priceSummary.price.amount value.   # noqa: E501

        :param prereservation_price_summary: The prereservation_price_summary of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: object
        """

        self._prereservation_price_summary = prereservation_price_summary

    @property
    def writeups(self):
        """Gets the writeups of this AllOfinlineResponse2004DataItems.  # noqa: E501

        Object which contains the partner supplied texts to be displayed to customers on an item. Note that the text needs to be localized with the **locale** parameter value.   # noqa: E501

        :return: The writeups of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: object
        """
        return self._writeups

    @writeups.setter
    def writeups(self, writeups):
        """Sets the writeups of this AllOfinlineResponse2004DataItems.

        Object which contains the partner supplied texts to be displayed to customers on an item. Note that the text needs to be localized with the **locale** parameter value.   # noqa: E501

        :param writeups: The writeups of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: object
        """

        self._writeups = writeups

    @property
    def reserved_units(self):
        """Gets the reserved_units of this AllOfinlineResponse2004DataItems.  # noqa: E501

        An array of reserved units from the result of this availability check. This section is optional, and is used typically when passing both a product id and attributes in the check availability call in order to identify the specific units being reserved in the reserve call. It is also used to denote units which have a temporary hold placed on them for the user, allowing the user a certain amount of time to claim (i.e. reserve) the inventory before the temporary hold is lost. This section may also be used for iframe bookings to pass details from the partner back to Groupon about the reservation. Please note that if quantity is specified in the request and this is specified in the response, the size of this array should match the quantity in the request.   # noqa: E501

        :return: The reserved_units of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :rtype: list[object]
        """
        return self._reserved_units

    @reserved_units.setter
    def reserved_units(self, reserved_units):
        """Sets the reserved_units of this AllOfinlineResponse2004DataItems.

        An array of reserved units from the result of this availability check. This section is optional, and is used typically when passing both a product id and attributes in the check availability call in order to identify the specific units being reserved in the reserve call. It is also used to denote units which have a temporary hold placed on them for the user, allowing the user a certain amount of time to claim (i.e. reserve) the inventory before the temporary hold is lost. This section may also be used for iframe bookings to pass details from the partner back to Groupon about the reservation. Please note that if quantity is specified in the request and this is specified in the response, the size of this array should match the quantity in the request.   # noqa: E501

        :param reserved_units: The reserved_units of this AllOfinlineResponse2004DataItems.  # noqa: E501
        :type: list[object]
        """

        self._reserved_units = reserved_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfinlineResponse2004DataItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfinlineResponse2004DataItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
