# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Grouponv1bookingsPurchaserDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'phone': 'phone'
    }

    def __init__(self, first_name=None, last_name=None, email=None, phone=None):  # noqa: E501
        """Grouponv1bookingsPurchaserDetails - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone

    @property
    def first_name(self):
        """Gets the first_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501

        A first name supplied by the purchaser and associated with this reserved unit.  # noqa: E501

        :return: The first_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Grouponv1bookingsPurchaserDetails.

        A first name supplied by the purchaser and associated with this reserved unit.  # noqa: E501

        :param first_name: The first_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501

        A last name supplied by the purchaser and associated with this reserved unit.  # noqa: E501

        :return: The last_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Grouponv1bookingsPurchaserDetails.

        A last name supplied by the purchaser and associated with this reserved unit.  # noqa: E501

        :param last_name: The last_name of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Grouponv1bookingsPurchaserDetails.  # noqa: E501

        An email address supplied by the purchaser.  If necessary, customer data may be provided for fulfillment purposes only, and if such information is provided, will be subject to contractual restrictions on usage (e.g. cannot be used for marketing purposes).   # noqa: E501

        :return: The email of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Grouponv1bookingsPurchaserDetails.

        An email address supplied by the purchaser.  If necessary, customer data may be provided for fulfillment purposes only, and if such information is provided, will be subject to contractual restrictions on usage (e.g. cannot be used for marketing purposes).   # noqa: E501

        :param email: The email of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Grouponv1bookingsPurchaserDetails.  # noqa: E501

        A phone number supplied by the purchaser. The phone number will come in with any formatting (e.g. separators) which the user specifies.  If necessary, customer data may be provided for fulfillment purposes only, and if such information is provided, will be subject to contractual restrictions on usage (e.g. cannot be used for marketing purposes).   # noqa: E501

        :return: The phone of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Grouponv1bookingsPurchaserDetails.

        A phone number supplied by the purchaser. The phone number will come in with any formatting (e.g. separators) which the user specifies.  If necessary, customer data may be provided for fulfillment purposes only, and if such information is provided, will be subject to contractual restrictions on usage (e.g. cannot be used for marketing purposes).   # noqa: E501

        :param phone: The phone of this Grouponv1bookingsPurchaserDetails.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Grouponv1bookingsPurchaserDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Grouponv1bookingsPurchaserDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
