# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfinlineResponse20019MerchantsRedemptionLocationsItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'images': 'list[object]',
        'external_ids': 'object'
    }

    attribute_map = {
        'images': 'images',
        'external_ids': 'externalIds'
    }

    def __init__(self, images=None, external_ids=None):  # noqa: E501
        """AllOfinlineResponse20019MerchantsRedemptionLocationsItems - a model defined in Swagger"""  # noqa: E501
        self._images = None
        self._external_ids = None
        self.discriminator = None
        if images is not None:
            self.images = images
        if external_ids is not None:
            self.external_ids = external_ids

    @property
    def images(self):
        """Gets the images of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501

        An ordered list of image URLs for this location.  The images will be retrieved from this URL and then re-uploaded into the Groupon Platform; they will not be used to serve live traffic.   # noqa: E501

        :return: The images of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501
        :rtype: list[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.

        An ordered list of image URLs for this location.  The images will be retrieved from this URL and then re-uploaded into the Groupon Platform; they will not be used to serve live traffic.   # noqa: E501

        :param images: The images of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501
        :type: list[object]
        """

        self._images = images

    @property
    def external_ids(self):
        """Gets the external_ids of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501

        General pricing information for the service.  # noqa: E501

        :return: The external_ids of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501
        :rtype: object
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.

        General pricing information for the service.  # noqa: E501

        :param external_ids: The external_ids of this AllOfinlineResponse20019MerchantsRedemptionLocationsItems.  # noqa: E501
        :type: object
        """

        self._external_ids = external_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfinlineResponse20019MerchantsRedemptionLocationsItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfinlineResponse20019MerchantsRedemptionLocationsItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
