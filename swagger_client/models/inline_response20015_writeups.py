# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015Writeups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locale': 'str',
        'title': 'str',
        'pitch': 'str',
        'highlights': 'str',
        'summary': 'str',
        'redemption_instructions_override': 'str',
        'restrictions_override': 'str'
    }

    attribute_map = {
        'locale': 'locale',
        'title': 'title',
        'pitch': 'pitch',
        'highlights': 'highlights',
        'summary': 'summary',
        'redemption_instructions_override': 'redemptionInstructionsOverride',
        'restrictions_override': 'restrictionsOverride'
    }

    def __init__(self, locale=None, title=None, pitch=None, highlights=None, summary=None, redemption_instructions_override=None, restrictions_override=None):  # noqa: E501
        """InlineResponse20015Writeups - a model defined in Swagger"""  # noqa: E501
        self._locale = None
        self._title = None
        self._pitch = None
        self._highlights = None
        self._summary = None
        self._redemption_instructions_override = None
        self._restrictions_override = None
        self.discriminator = None
        self.locale = locale
        self.title = title
        self.pitch = pitch
        if highlights is not None:
            self.highlights = highlights
        if summary is not None:
            self.summary = summary
        if redemption_instructions_override is not None:
            self.redemption_instructions_override = redemption_instructions_override
        if restrictions_override is not None:
            self.restrictions_override = restrictions_override

    @property
    def locale(self):
        """Gets the locale of this InlineResponse20015Writeups.  # noqa: E501

        The locale and country code which represents the language for the content. This should use the ISO-3166-1 and UN M.49 variation of the IETF language tag (https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49).   # noqa: E501

        :return: The locale of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this InlineResponse20015Writeups.

        The locale and country code which represents the language for the content. This should use the ISO-3166-1 and UN M.49 variation of the IETF language tag (https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49).   # noqa: E501

        :param locale: The locale of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def title(self):
        """Gets the title of this InlineResponse20015Writeups.  # noqa: E501

        The general title for the offer. This will appear as the link text and main page title on the offer listing and elsewhere where the offer shows up on Groupon.   # noqa: E501

        :return: The title of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse20015Writeups.

        The general title for the offer. This will appear as the link text and main page title on the offer listing and elsewhere where the offer shows up on Groupon.   # noqa: E501

        :param title: The title of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def pitch(self):
        """Gets the pitch of this InlineResponse20015Writeups.  # noqa: E501

        The main general writeup for the offer. This text will be used on the main page for the offer.   # noqa: E501

        :return: The pitch of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this InlineResponse20015Writeups.

        The main general writeup for the offer. This text will be used on the main page for the offer.   # noqa: E501

        :param pitch: The pitch of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """
        if pitch is None:
            raise ValueError("Invalid value for `pitch`, must not be `None`")  # noqa: E501

        self._pitch = pitch

    @property
    def highlights(self):
        """Gets the highlights of this InlineResponse20015Writeups.  # noqa: E501

        This text will be used on the main page for the offer in the Highlights section.   # noqa: E501

        :return: The highlights of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this InlineResponse20015Writeups.

        This text will be used on the main page for the offer in the Highlights section.   # noqa: E501

        :param highlights: The highlights of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """

        self._highlights = highlights

    @property
    def summary(self):
        """Gets the summary of this InlineResponse20015Writeups.  # noqa: E501

        A brief general summary description for the offer. This will be used on search results and other places where a brief description of the offer appears.   # noqa: E501

        :return: The summary of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InlineResponse20015Writeups.

        A brief general summary description for the offer. This will be used on search results and other places where a brief description of the offer appears.   # noqa: E501

        :param summary: The summary of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def redemption_instructions_override(self):
        """Gets the redemption_instructions_override of this InlineResponse20015Writeups.  # noqa: E501

        An override to the default redemption instructions text configured for the partner. This text is used to inform users how to redeem their offer, and will appear on the voucher. Please see the below section on Overriding Redemption Instructions and Restrictions.   # noqa: E501

        :return: The redemption_instructions_override of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._redemption_instructions_override

    @redemption_instructions_override.setter
    def redemption_instructions_override(self, redemption_instructions_override):
        """Sets the redemption_instructions_override of this InlineResponse20015Writeups.

        An override to the default redemption instructions text configured for the partner. This text is used to inform users how to redeem their offer, and will appear on the voucher. Please see the below section on Overriding Redemption Instructions and Restrictions.   # noqa: E501

        :param redemption_instructions_override: The redemption_instructions_override of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """

        self._redemption_instructions_override = redemption_instructions_override

    @property
    def restrictions_override(self):
        """Gets the restrictions_override of this InlineResponse20015Writeups.  # noqa: E501

        An override to the default restrictions text configured for the partner. This text is used to inform users are restrictions around the offer, and will appear on the voucher and the offer page. Please see the below section on Overriding Redemption Instructions and Restrictions.   # noqa: E501

        :return: The restrictions_override of this InlineResponse20015Writeups.  # noqa: E501
        :rtype: str
        """
        return self._restrictions_override

    @restrictions_override.setter
    def restrictions_override(self, restrictions_override):
        """Sets the restrictions_override of this InlineResponse20015Writeups.

        An override to the default restrictions text configured for the partner. This text is used to inform users are restrictions around the offer, and will appear on the voucher and the offer page. Please see the below section on Overriding Redemption Instructions and Restrictions.   # noqa: E501

        :param restrictions_override: The restrictions_override of this InlineResponse20015Writeups.  # noqa: E501
        :type: str
        """

        self._restrictions_override = restrictions_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015Writeups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015Writeups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
