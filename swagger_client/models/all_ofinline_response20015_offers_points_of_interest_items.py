# coding: utf-8

"""
    Groupon Connect APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: 3pip@groupon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfinlineResponse20015OffersPointsOfInterestItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street_address': 'str',
        'extended_address': 'str',
        'locality': 'str',
        'region': 'str',
        'postal_code': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'street_address': 'streetAddress',
        'extended_address': 'extendedAddress',
        'locality': 'locality',
        'region': 'region',
        'postal_code': 'postalCode',
        'country_code': 'countryCode'
    }

    def __init__(self, street_address=None, extended_address=None, locality=None, region=None, postal_code=None, country_code=None):  # noqa: E501
        """AllOfinlineResponse20015OffersPointsOfInterestItems - a model defined in Swagger"""  # noqa: E501
        self._street_address = None
        self._extended_address = None
        self._locality = None
        self._region = None
        self._postal_code = None
        self._country_code = None
        self.discriminator = None
        self.street_address = street_address
        if extended_address is not None:
            self.extended_address = extended_address
        self.locality = locality
        self.region = region
        self.postal_code = postal_code
        self.country_code = country_code

    @property
    def street_address(self):
        """Gets the street_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        The primary street address for this address.  # noqa: E501

        :return: The street_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        The primary street address for this address.  # noqa: E501

        :param street_address: The street_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """
        if street_address is None:
            raise ValueError("Invalid value for `street_address`, must not be `None`")  # noqa: E501

        self._street_address = street_address

    @property
    def extended_address(self):
        """Gets the extended_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        Additional address information, such as suite, apartment, floor, or unit number.  # noqa: E501

        :return: The extended_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._extended_address

    @extended_address.setter
    def extended_address(self, extended_address):
        """Sets the extended_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        Additional address information, such as suite, apartment, floor, or unit number.  # noqa: E501

        :param extended_address: The extended_address of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """

        self._extended_address = extended_address

    @property
    def locality(self):
        """Gets the locality of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        The locality for this address, such as city or town name.  # noqa: E501

        :return: The locality of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        The locality for this address, such as city or town name.  # noqa: E501

        :param locality: The locality of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """
        if locality is None:
            raise ValueError("Invalid value for `locality`, must not be `None`")  # noqa: E501

        self._locality = locality

    @property
    def region(self):
        """Gets the region of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        The region for this address, such as state or province.  # noqa: E501

        :return: The region of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        The region for this address, such as state or province.  # noqa: E501

        :param region: The region of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def postal_code(self):
        """Gets the postal_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        The postal code for this address.  # noqa: E501

        :return: The postal_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        The postal code for this address.  # noqa: E501

        :param postal_code: The postal_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country_code(self):
        """Gets the country_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501

        The [ISO 3166-1 Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for this address.  # noqa: E501

        :return: The country_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.

        The [ISO 3166-1 Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for this address.  # noqa: E501

        :param country_code: The country_code of this AllOfinlineResponse20015OffersPointsOfInterestItems.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfinlineResponse20015OffersPointsOfInterestItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfinlineResponse20015OffersPointsOfInterestItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
